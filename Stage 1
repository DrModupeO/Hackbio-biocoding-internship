#Task One- Create a function that translates DNA to a protein
def translate_dna_to_protein(DNA_seq):
    """
    Translates a given DNA into a protein.
    """
    rna_seq = dna_seq.replace("T", "U") #Convert DNA to an RNA using the replace function
    codon_table_dict = {
    'AUG': 'Methionine', 'UUU': 'Phenylalanine', 'UUC': 'Phenylalanine',
    'UUA': 'Leucine', 'UUG': 'Leucine', 'UCU': 'Serine', 'UCC': 'Serine',
    'UCA': 'Serine', 'UCG': 'Serine', 'UAU': 'Tyrosine', 'UAC': 'Tyrosine',
    'UGU': 'Cysteine', 'UGC': 'Cysteine', 'UGG': 'Tryptophan', 'CUU': 'Leucine',
    'CUC': 'Leucine', 'CUA': 'Leucine', 'CUG': 'Leucine', 'CCU': 'Proline',
    'CCC': 'Proline', 'CCA': 'Proline', 'CCG': 'Proline', 'CAU': 'Histidine',
    'CAC': 'Histidine', 'CAA': 'Glutamine', 'CAG': 'Glutamine', 'CGU': 'Arginine',
    'CGC': 'Arginine', 'CGA': 'Arginine', 'CGG': 'Arginine', 'AUU': 'Isoleucine',
    'AUC': 'Isoleucine', 'AUA': 'Isoleucine', 'ACU': 'Threonine', 'ACC': 'Threonine',
    'ACA': 'Threonine', 'ACG': 'Threonine', 'AAU': 'Asparagine', 'AAC': 'Asparagine',
    'AAA': 'Lysine', 'AAG': 'Lysine', 'AGU': 'Serine', 'AGC': 'Serine',
    'AGA': 'Arginine', 'AGG': 'Arginine', 'GUU': 'Valine', 'GUC': 'Valine',
    'GUA': 'Valine', 'GUG': 'Valine', 'GCU': 'Alanine', 'GCC': 'Alanine',
    'GCA': 'Alanine', 'GCG': 'Alanine', 'GAU': 'Aspartic Acid', 'GAC': 'Aspartic Acid',
    'GAA': 'Glutamic Acid', 'GAG': 'Glutamic Acid', 'GGU': 'Glycine', 'GGC': 'Glycine',
    'GGA': 'Glycine', 'GGG': 'Glycine', 'UAA': 'STOP', 'UAG': 'STOP', 'UGA': 'STOP'
    }
    protein = [] #Create an empty list to house the translated mRNA 
    for n in range(0, len(rna_seq) , 3): #iterate through the length of the sequences 
        triplet_nucleotide = rna_seq[i:i+3] #split the translated mRNA into triplets of nucleotides or codon
        amino_acid = codon_table_dict.get(triplet_nucleotide, 'Unknown') #Create a variable to translate the RNA key to the value of the aminoacid from the table
        if amino_acid == 'Stop':
            break
        protein.append(amino_acid)
    return '-'.join(protein)

 #Task 2 - Create a function that simulates logistic population growth
import random

def logistic_growth_simulation(max_population=1000, initial_population=10, max_time=100, steps=200):
    """
    Simulates and generates a logistic population growth curve with random lag and exponential phase durations.
    Returns list of time points and list of population values over time
    """
    time = [i * (max_time / steps) for i in range(steps)] #Define the array (evenly spaced points from 0 to max_time)
    #Randomize the duration of lag and exponential phases
    lag_phase = random.uniform(5, 20) 
    exp_phase = random.uniform(10, 50)  
    
    #Define growth rates for different phases
    growth_rate = [] #create an empty list to house the growth rate
    for t in time:
        if t < lag_phase:
            growth_rate.append(0.01) 
        elif lag_phase <= t < lag_phase + exp_phase:
            growth_rate.append(0.2)  
        else:
            growth_rate.append(0.05)  #Slower growth as it reaches max capacity
    #Compute population over time using a basic logistic equation
    population = []
    current_population = initial_population
    for i, t in enumerate(time):
        r = growth_rate[i]
        exponent = -r * (t - lag_phase)
        logistic_growth = max_population / (1 + ((max_population - initial_population) / initial_population) * (2.718 ** exponent))
        population.append(logistic_growth)
    
    return time, population

 #Task2b- generate a dataframe with 100 different growth curves
# Generate 100 different growth curves and store them in a dictionary
growth_curves = {}
for i in range(1, 101):
    time, population = logistic_growth_simulation()
    growth_curves[f"Growth_Curve_{i}"] = population

time_points = logistic_growth_simulation()[0]  #Extract time points from one simulation
growth_curves["Time"] = time_points

#Task 3- Write a function for determining the time to reach 80% of max growth 
def time_2_80%_carrying_capacity(time, population,max_population):
    """
    Determines the time it takes for the population to reach 80% of the carrying capacity and
    returns the time the population reaches 80% of carrying capacity
    """
    target_pop = 0.8 * carrying capacity
    for t, pop in zip(time, population):
        if pop >= target_population:
            return t
    return None  #If population never reaches 80% of carrying capacity

#Task 4- Create a function to calculate the hamming distance between your Slack Username and X handle
Slack_str = 'modupebeautyxxx' #create a variable for slack username 
X_str = 'samagbeyimodupe' #create a variable for X handle
Hamming_dist = 0
for i in range(len(Slack_str)):  # Assuming all strings are of the same length, iterate through the length of Slack_str
    if (Slack_str[i] != X_str[i]): 
        Hamming_dist += 1  #increase if at least one mismatch

print(f"Hamming Distance is", Hamming_dist)

##Output= Hamming Distance is 15.

