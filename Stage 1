#Task One- Create a function that translates DNA to a protein
def translate_dna_to_protein(DNA_seq):
    """
    Translates a given DNA into a protein.
    """
    rna_seq = dna_seq.replace("T", "U") #Convert DNA to an RNA using the replace function
    codon_table_dict = {
    'AUG': 'Methionine', 'UUU': 'Phenylalanine', 'UUC': 'Phenylalanine',
    'UUA': 'Leucine', 'UUG': 'Leucine', 'UCU': 'Serine', 'UCC': 'Serine',
    'UCA': 'Serine', 'UCG': 'Serine', 'UAU': 'Tyrosine', 'UAC': 'Tyrosine',
    'UGU': 'Cysteine', 'UGC': 'Cysteine', 'UGG': 'Tryptophan', 'CUU': 'Leucine',
    'CUC': 'Leucine', 'CUA': 'Leucine', 'CUG': 'Leucine', 'CCU': 'Proline',
    'CCC': 'Proline', 'CCA': 'Proline', 'CCG': 'Proline', 'CAU': 'Histidine',
    'CAC': 'Histidine', 'CAA': 'Glutamine', 'CAG': 'Glutamine', 'CGU': 'Arginine',
    'CGC': 'Arginine', 'CGA': 'Arginine', 'CGG': 'Arginine', 'AUU': 'Isoleucine',
    'AUC': 'Isoleucine', 'AUA': 'Isoleucine', 'ACU': 'Threonine', 'ACC': 'Threonine',
    'ACA': 'Threonine', 'ACG': 'Threonine', 'AAU': 'Asparagine', 'AAC': 'Asparagine',
    'AAA': 'Lysine', 'AAG': 'Lysine', 'AGU': 'Serine', 'AGC': 'Serine',
    'AGA': 'Arginine', 'AGG': 'Arginine', 'GUU': 'Valine', 'GUC': 'Valine',
    'GUA': 'Valine', 'GUG': 'Valine', 'GCU': 'Alanine', 'GCC': 'Alanine',
    'GCA': 'Alanine', 'GCG': 'Alanine', 'GAU': 'Aspartic Acid', 'GAC': 'Aspartic Acid',
    'GAA': 'Glutamic Acid', 'GAG': 'Glutamic Acid', 'GGU': 'Glycine', 'GGC': 'Glycine',
    'GGA': 'Glycine', 'GGG': 'Glycine', 'UAA': 'STOP', 'UAG': 'STOP', 'UGA': 'STOP'
    }
    protein = [] #Create an empty list to house the translated mRNA 
    for n in range(0, len(rna_seq) , 3): #iterate through the length of the sequences 
        triplet_nucleotide = rna_seq[i:i+3] #split the translated mRNA into triplets of nucleotides or codon
        amino_acid = codon_table_dict.get(triplet_nucleotide, 'Unknown') #Create a variable to translate the RNA key to the value of the aminoacid from the table
        if amino_acid == 'Stop':
            break
        protein.append(amino_acid)
    return '-'.join(protein)

   
