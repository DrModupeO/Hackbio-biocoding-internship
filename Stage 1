#Task One- Create a function that translates DNA to a protein
def translate_dna_to_protein(DNA_seq):
    """
    Translates a given DNA into a protein.
    """
    rna_seq = dna_seq.replace("T", "U") #Convert DNA to an RNA using the replace function
    codon_table_dict = {
    'AUG': 'Methionine', 'UUU': 'Phenylalanine', 'UUC': 'Phenylalanine',
    'UUA': 'Leucine', 'UUG': 'Leucine', 'UCU': 'Serine', 'UCC': 'Serine',
    'UCA': 'Serine', 'UCG': 'Serine', 'UAU': 'Tyrosine', 'UAC': 'Tyrosine',
    'UGU': 'Cysteine', 'UGC': 'Cysteine', 'UGG': 'Tryptophan', 'CUU': 'Leucine',
    'CUC': 'Leucine', 'CUA': 'Leucine', 'CUG': 'Leucine', 'CCU': 'Proline',
    'CCC': 'Proline', 'CCA': 'Proline', 'CCG': 'Proline', 'CAU': 'Histidine',
    'CAC': 'Histidine', 'CAA': 'Glutamine', 'CAG': 'Glutamine', 'CGU': 'Arginine',
    'CGC': 'Arginine', 'CGA': 'Arginine', 'CGG': 'Arginine', 'AUU': 'Isoleucine',
    'AUC': 'Isoleucine', 'AUA': 'Isoleucine', 'ACU': 'Threonine', 'ACC': 'Threonine',
    'ACA': 'Threonine', 'ACG': 'Threonine', 'AAU': 'Asparagine', 'AAC': 'Asparagine',
    'AAA': 'Lysine', 'AAG': 'Lysine', 'AGU': 'Serine', 'AGC': 'Serine',
    'AGA': 'Arginine', 'AGG': 'Arginine', 'GUU': 'Valine', 'GUC': 'Valine',
    'GUA': 'Valine', 'GUG': 'Valine', 'GCU': 'Alanine', 'GCC': 'Alanine',
    'GCA': 'Alanine', 'GCG': 'Alanine', 'GAU': 'Aspartic Acid', 'GAC': 'Aspartic Acid',
    'GAA': 'Glutamic Acid', 'GAG': 'Glutamic Acid', 'GGU': 'Glycine', 'GGC': 'Glycine',
    'GGA': 'Glycine', 'GGG': 'Glycine', 'UAA': 'STOP', 'UAG': 'STOP', 'UGA': 'STOP'
    }
    protein = [] #Create an empty list to house the translated mRNA 
    for n in range(0, len(rna_seq) , 3): #iterate through the length of the sequences 
        triplet_nucleotide = rna_seq[i:i+3] #split the translated mRNA into triplets of nucleotides or codon
        amino_acid = codon_table_dict.get(triplet_nucleotide, 'Unknown') #Create a variable to translate the RNA key to the value of the aminoacid from the table
        if amino_acid == 'Stop':
            break
        protein.append(amino_acid)
    return '-'.join(protein)

 #Task 2 - Create a function that simulates population growth
import numpy as np
import random
def logistic_population_growth(max_population=1000, initial_population=10, max_duration=100):
    "This function simulates and generates a logistic population growth curve with random lag and exponential phase durations.Returns array of time points and population values over time"
    time = np.linspace(0, max_duration, 100) #Define time array 
    lag_phase = random.uniform(5, 20)  #Randomize the duration of lag and exponential phases
    exp_phase = random.uniform(10, 50)  
    growth_rate = np.piecewise(time, 
                               [time < lag_phase, (time >= lag_phase) & (time < lag_phase + exp_phase), time >= lag_phase + exp_phase],
                               [0.01, 0.2, 0.05]) # Define growth rates for different phases
    population = np.zeros_like(time) #Compute population over time using modified logistic equation
    for i, t in enumerate(time):
        if t < lag_phase:
            population[i] = initial_population # No growth during lag phase
        else:
            r = growth_rate[i]
            population[i] = max_population / (1 + (max_population/initial_population - 1) * np.exp(-r * (t - lag_phase)))
    
    return time, population

 #Task2b- generate a dataframe with 100 different growth curves
Generated_data= {"Time": np.linspace(0, 100, 200)}
for i in range(1, 101):  #100 different simulations
    population = logistic_population_growth() #ignoring the time value using the _
    Generated_data[f"Growth_Curve_{i}"] = population
import pandas as pd
df = pd.DataFrame(Generated_data)
print(df.head())

#Task 3- Write a function for determining the time to reach 80% of max growth 

#Task4 - Write a function to calculate the hamming distance between your slack username and yout X handle

